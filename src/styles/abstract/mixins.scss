/* ==========================================================================
     Vertical Rhythm & Modular Scale Mixins
   ========================================================================== */
/**
* Calcuations based on https://github.com/sevenupcan/gridlover-mixin
*
* Notes:
*  - All values are calculated and returned as em & rem to maintain the scale when text is resized in the browser.
*  - Both margin values provided need to be false or a 0+ integer in order to maintain the vertical rhythm
*
* @param  {number} $font-scale    [The multiplier for the font size scale factor, zero equates to the default font size.]
* @param  {number} $margin-top    [The multiplier for the top margin where 1 is the rhythm line height]
* @param  {number} $margin-bottom [The multiplier for the bottom margin where 1 is the rhythm line height]
*/
@mixin rhythm($font-scale, $margin-top: false, $margin-bottom: false) {
  $new-font-size: round(
    $rhythm-font-size * pow($rhythm-scale-factor, $font-scale)
  );
  $new-line-height: ceil(
      ($new-font-size / ($rhythm-line-height * $rhythm-font-size))
    ) * round($rhythm-line-height * $rhythm-font-size);

  @if $font-scale == 0 {
    font-size: 1rem;
    line-height: $rhythm-line-height + 0em;
  } @else {
    font-size: ($new-font-size / $rhythm-font-size) + 0rem;
    line-height: ($new-line-height / $new-font-size) + 0em;
  }

  @if $margin-top != false {
    margin-top: (
        $rhythm-font-size * ($rhythm-line-height * $margin-top) / $new-font-size
      ) +
      0em;
  }

  @if $margin-bottom != false {
    margin-bottom: (
        $rhythm-font-size *
          ($rhythm-line-height * $margin-bottom) /
          $new-font-size
      ) +
      0em;
  }
}

/**
* Vertical Rhythm needs to be recalculated at the mobile breakpoint to account for the change in font size, scale, and
* line height at that size. In order to reduce duplication of the primary mixin above, we're defining the shared rhythm
* values in these .rhythm-desktop and .rhythm-mobile mixins and both call the same mixin to do the calculations.
*/
@mixin rhythm-desktop($font-scale, $margin-top: false, $margin-bottom: false) {
  $rhythm-font-size: $global-font-size !global;
  $rhythm-scale-factor: $global-scale-factor !global;
  $rhythm-line-height: $global-line-height !global;

  @include rhythm($font-scale, $margin-top, $margin-bottom);
}

@mixin rhythm-mobile($font-scale, $margin-top: false, $margin-bottom: false) {
  $rhythm-font-size: $global-font-size-mobile !global;
  $rhythm-scale-factor: $global-scale-factor-mobile !global;
  $rhythm-line-height: $global-line-height-mobile !global;

  @include rhythm($font-scale, $margin-top, $margin-bottom);
}

/* ==========================================================================
     Media Queries
   ========================================================================== */
/**
* Provides the vendor prefixes required for styling a text field placeholder text
*
* @param $color [hexadecimal string] : This is the hexadecimal color code
*
* @example scss - Usage
* @include media-mobile {
*    display: none;
* }
*/

$mobile-width: 576px;
$tablet-width: 768px;
$desktop-width: 992px;

@mixin media-small-mobile {
  @media (max-width: #{$mobile-width - 1px}) {
    @content;
  }
}

@mixin media-mobile {
  @media (max-width: #{$tablet-width - 1px}) {
    @content;
  }
}

@mixin media-tablet {
  @media (min-width: #{$tablet-width}) and (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

@mixin media-desktop {
  @media (min-width: #{$desktop-width}) {
    @content;
  }
}

@mixin media-devices-not-mobile {
  @media (min-width: #{$tablet-width}) {
    @content;
  }
}

@mixin media-devices-not-desktop {
  @media (max-width: #{$desktop-width - 1px}) {
    @content;
  }
}

/* ==========================================================================
     Chevron
   ========================================================================== */

@mixin chevron($color: $c-primary, $horizontal-align: 'center', $size: 18px) {
  &--active {
    &::after {
      @if $horizontal-align == 'center' {
        transform: rotate(180deg) translate(50%, 50%) !important;
      } @else {
        transform: rotate(180deg) translateY(50%) !important;
      }
    }
  }

  &::after {
    $fillColor: str-replace('#{$color}', '#', '%23');
    content: '';
    position: absolute;
    @if $horizontal-align == 'center' {
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
    } @else {
      top: 50%;
      right: -($size * 1.25);
      transform: translateY(-50%);
    }

    color: $c-primary;
    flex-shrink: 0;
    width: $size;
    height: $size;
    margin-left: auto;
    background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 16 16' fill='#{$fillColor}'%3e%3cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3e%3c/svg%3e");
    background-repeat: no-repeat;
    background-size: $size;
    transition: transform 0.2s ease-in-out;
  }
}
